ggboxplot(x = "wave", y = "religiosity",
color = "wave",
add = "jitter")
#  Add p-value
p + stat_compare_means()
ds <-
filtered_data %>%
mutate(waveL = case_when(wave =="wave1"~1L,TRUE ~ 2L) %>% as.integer())  # for geom_smooth to work
war_var_labels %>% tibble()
p <-
ds %>%
mutate(wave = factor(wave,levels = c("wave1","wave2"))) %>%
ggboxplot(x = "wave", y = "religiosity",
color = "wave",
add = "jitter")
#  Add p-value
p + stat_compare_means()
war_var_labels %>% tibble()
ds <-
filtered_data %>%
# integer indicator for the wave to ease some graphing
mutate(waveL = case_when(wave =="wave1"~1L,TRUE ~ 2L) %>% as.integer())  # for geom_smooth to work
war_var_labels %>% tibble()
tibble(var_name = names(war_var_labels), var_value = war_var_labels)
ds %>% tableone::CreateTableOne(data=.)
tibble(var_name = names(war_var_labels), var_value = war_var_labels)
ds %>% tableone::CreateTableOne(data=.)
ds <-
filtered_data %>%
# integer indicator for the wave to ease some graphing
mutate(waveL = case_when(wave =="wave1"~1L,TRUE ~ 2L) %>% as.integer())  # for geom_smooth to work
ds %>% explore::describe_all()
# Show distribution of key outcome at both waves
# see more at http://www.sthda.com/english/articles/24-ggpubr-publication-ready-plots/76-add-p-values-and-significance-levels-to-ggplots/
library(ggpubr)
p <-
ds %>%
mutate(wave = factor(wave,levels = c("wave1","wave2"))) %>%
ggboxplot(x = "wave", y = "religiosity",
color = "wave",
add = "jitter")
#  Add p-value
p + stat_compare_means()
# Change method
p + stat_compare_means(method = "t.test")
# compute raw equation to test hypotheses non-rigoroursly (no stat test of sign or adj of variance)
add_equation <-
ggpmisc::stat_poly_eq(formula = y ~ + x
,aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~"))
,parse = TRUE
,label.x = 0.1
,label.y = 1.5)
# Show the observed, person-level change
g1 <-
ds %>%
ggplot(aes(x=waveL, y = religiosity))+
geom_point(alpha = .2)+
geom_line(aes(group = key),alpha = .2)+
geom_smooth(method = "lm")+
add_equation +
scale_x_continuous(breaks = c(1,2))
g1
# test hypothesis visually
g1 <-
ds %>%
ggplot(aes(x=wave, y = religiosity, color = affected_index_dummy))+
geom_point(alpha = .2)+
geom_line(aes(group = key),alpha = .2)+
geom_smooth(method = "lm")+
add_equation+
scale_x_continuous(breaks = c(1,2))
g1
# test hypothesis visually
g1 <-
ds %>%
ggplot(aes(x=wave, y = religiosity, color = affected_index_dummy))+
geom_point(alpha = .2)+
geom_line(aes(group = key),alpha = .2)+
geom_smooth(method = "lm")+
scale_x_continuous(breaks = c(1,2))
g1
ds
ds %>% select(wave, religiosity, affected_index_dummy)
# test hypothesis visually
g1 <-
ds %>%
# select(wave, religiosity, affected_index_dummy)
ggplot(aes(x=wave, y = religiosity, color = affected_index_dummy))+
geom_point(alpha = .2)+
geom_line(aes(group = key),alpha = .2)+
# geom_smooth(method = "lm")+
# add_equation+
scale_x_continuous(breaks = c(1,2))
g1
g1 <-
ds %>%
# select(wave, religiosity, affected_index_dummy)
# ggplot(aes(x=wave, y = religiosity, color = affected_index_dummy))+
ggplot(aes(x=wave, y = religiosity)+
geom_point(alpha = .2)+
geom_line(aes(group = key),alpha = .2)+
# geom_smooth(method = "lm")+
# add_equation+
scale_x_continuous(breaks = c(1,2))
g1
g1 <-
ds %>%
# select(wave, religiosity, affected_index_dummy)
# ggplot(aes(x=wave, y = religiosity, color = affected_index_dummy))+
ggplot(aes(x=wave, y = religiosity)+
geom_point(alpha = .2)+
geom_line(aes(group = key),alpha = .2)+
# geom_smooth(method = "lm")+
# add_equation+
scale_x_continuous(breaks = c(1,2))
g1
ds %>%
# select(wave, religiosity, affected_index_dummy)
# ggplot(aes(x=wave, y = religiosity, color = affected_index_dummy))+
ggplot(aes(x=wave, y = religiosity)+
geom_point(alpha = .2)+
geom_line(aes(group = key),alpha = .2)
g1 <-
ds %>%
# select(wave, religiosity, affected_index_dummy)
# ggplot(aes(x=wave, y = religiosity, color = affected_index_dummy))+
ggplot(aes(x=wave, y = religiosity))+
geom_point(alpha = .2)+
g1 <-
ds %>%
ggplot(aes(x=waveL, y = religiosity))+
geom_point(alpha = .2)+
geom_line(aes(group = key),alpha = .2)+
geom_smooth(method = "lm")+
add_equation +
scale_x_continuous(breaks = c(1,2))
# Show the observed, person-level change
g1 <-
ds %>%
ggplot(aes(x=waveL, y = religiosity))+
geom_point(alpha = .2)+
geom_line(aes(group = key),alpha = .2)+
geom_smooth(method = "lm")+
add_equation +
scale_x_continuous(breaks = c(1,2))
g1
# test hypothesis visually
g1 <-
ds %>%
# select(wave, religiosity, affected_index_dummy)
# ggplot(aes(x=wave, y = religiosity, color = affected_index_dummy))+
ggplot(aes(x=wave, y = religiosity))+
geom_point(alpha = .2)+
geom_line(aes(group = key),alpha = .2)+
# geom_smooth(method = "lm")+
# add_equation+
scale_x_continuous(breaks = c(1,2))
g1
g1 <-
ds %>%
# select(wave, religiosity, affected_index_dummy)
# ggplot(aes(x=wave, y = religiosity, color = affected_index_dummy))+
ggplot(aes(x=waveL, y = religiosity))+
geom_point(alpha = .2)+
geom_line(aes(group = key),alpha = .2)+
# geom_smooth(method = "lm")+
# add_equation+
scale_x_continuous(breaks = c(1,2))
g1
g1 <-
ds %>%
# select(wave, religiosity, affected_index_dummy)
ggplot(aes(x=waveL, y = religiosity, color = affected_index_dummy))+
# ggplot(aes(x=waveL, y = religiosity))+
geom_point(alpha = .2)+
geom_line(aes(group = key),alpha = .2)+
# geom_smooth(method = "lm")+
# add_equation+
scale_x_continuous(breaks = c(1,2))
g1
g1 <-
ds %>%
# select(wave, religiosity, affected_index_dummy)
ggplot(aes(x=waveL, y = religiosity, color = as_factor(affected_index_dummy)))+
# ggplot(aes(x=waveL, y = religiosity))+
geom_point(alpha = .2)+
geom_line(aes(group = key),alpha = .2)+
# geom_smooth(method = "lm")+
# add_equation+
scale_x_continuous(breaks = c(1,2))
g1
g1 %>%
ds %>%
ggplot(aes(x=waveL, y = religiosity)) +
geom_line()
g1 <-
ds %>%
ggplot(aes(x=waveL, y = religiosity)) +
geom_line()
g1
g1 <-
ds %>%
ggplot(aes(x=waveL, y = religiosity)) +
geom_line(aes(group = key))
g1
g1 <-
ds %>%
ggplot(aes(x=waveL, y = religiosity, color = affected_index_dummy)) +
geom_line(aes(group = key))
g1
g1 <-
ds %>%
ggplot(aes(x=waveL, y = religiosity, color = as_factor(affected_index_dummy))) +
geom_line(aes(group = key))
g1
g1 <-
ds %>%
ggplot(aes(x=waveL, y = c15, color = as_factor(affected_index_dummy))) +
geom_line(aes(group = key))
g1
# Show the observed, person-level change
g1 <-
ds %>%
ggplot(aes(x=waveL, y = religiosity))+
geom_point(alpha = .2)+
geom_line(aes(group = key),alpha = .2)+
geom_smooth(method = "lm")+
add_equation +
scale_x_continuous(breaks = c(1,2))
g1
g1 <-
ds %>%
# select(wave, religiosity, affected_index_dummy)
ggplot(aes(x=waveL, y = religiosity, color = as_factor(affected_index_dummy)))+
# ggplot(aes(x=waveL, y = religiosity))+
geom_point(alpha = .2)+
geom_line(aes(group = key),alpha = .2)+
# geom_smooth(method = "lm")+
# add_equation+
scale_x_continuous(breaks = c(1,2))
g1
g1 <-
ds %>%
ggplot(aes(x=waveL, y = religiosity, color = as_factor(affected_index_dummy)))+
geom_point(alpha = .2)+
geom_line(aes(group = key),alpha = .2)+
geom_smooth(method = "lm")+
add_equation+
scale_x_continuous(breaks = c(1,2))
g1
# looks like something off with the sample: no cases of "treatment"
ds %>% count(affected_index_dummy)
ds %>%
select(waveL, religiosity, affected_index, affected_index_dummy)
ds %>%
select(waveL, religiosity, affected_index, affected_index_dummy) %>% arragne(key)
ds %>%
select(waveL, religiosity, affected_index, affected_index_dummy) %>% arrange(key)
ds %>%
select(key, waveL, religiosity, affected_index, affected_index_dummy) %>% arrange(key)
ds %>%
select(key, waveL, religiosity, affected_index, affected_index_dummy) %>% arrange(key) %>% print_all()
# the variable `affected_index` appears to be wave-level, but must be person-level
ds %>%
ds %>%
filter( key %in% c(25070, 28593, 46674))
# the variable `affected_index` appears to be wave-level, but must be person-level
ds %>%
filter( key %in% c(25070, 28593, 46674)) %>%
select(key, waveL, religiosity, affected_index, affected_index_dummy) %>% arrange(key)
p <-
ds %>%
mutate(wave = factor(wave,levels = c("wave1","wave2"))) %>%
ggboxplot(x = "wave", y = "religiosity",
color = "wave",
add = "jitter")
#  Add p-value
p + stat_compare_means()
add_equation <-
ggpmisc::stat_poly_eq(formula = y ~ + x
,aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~"))
,parse = TRUE
,label.x = 0.1
,label.y = 1.5)
# Show the observed, person-level change
g1 <-
ds %>%
ggplot(aes(x=waveL, y = religiosity))+
geom_point(alpha = .2)+
geom_line(aes(group = key),alpha = .2)+
geom_smooth(method = "lm")+
add_equation +
scale_x_continuous(breaks = c(1,2))
g1
g1
g1 <-
ds %>%
ggplot(aes(x=waveL, y = religiosity, color = as_factor(affected_index_dummy)))+
geom_point(alpha = .2)+
geom_line(aes(group = key),alpha = .2)+
geom_smooth(method = "lm")+
add_equation+
scale_x_continuous(breaks = c(1,2))
g1
# the variable `affected_index` appears to be wave-level, but should be person-level
ds %>%
filter( key %in% c(25070, 28593, 46674)) %>%
select(key, waveL, religiosity, affected_index, affected_index_dummy) %>% arrange(key)
library(tidyverse)
load("./analysis/ua-war-religion/toy-data.RData")
setwd("C:/Users/Andriy/Documents/GitHub/quick-start-template/analysis/ua-war-religion")
library(tidyverse)
load("../../analysis/ua-war-religion/toy-data.RData")
setwd("C:/Users/Andriy/Documents/GitHub/quick-start-template")
rm(list = ls(all.names = TRUE)) # Clear the memory of variables from previous run. This is not called by knitr, because it's above the first chunk.
cat("\014") # Clear the console
# verify root location
cat("Working directory: ", getwd()) # Must be set to Project Directory
# Project Directory should be the root by default unless overwritten
# ---- load-packages -----------------------------------------------------------
# Choose to be greedy: load only what's needed
# Three ways, from least (1) to most(3) greedy:
# -- 1.Attach these packages so their functions don't need to be qualified: http://r-pkgs.had.co.nz/namespace.html#search-path
library(ggplot2)   # graphs
library(forcats)   # factors
library(stringr)   # strings
library(lubridate) # dates
library(labelled)  # labels
library(scales)    # format
# -- 2.Import only certain functions of a package into the search path.
import::from("magrittr", "%>%")
install.packages("import")
# ---- inspect-data ------------------------------------------------------------
tibble(var_name = names(war_var_labels), var_value = war_var_labels)
# ---- load-data ---------------------------------------------------------------
load("./analysis/ua-war-religion/toy-data.RData")
ds <-
filtered_data %>%
# integer indicator for the wave to ease some graphing
mutate(waveL = case_when(wave =="wave1"~1L,TRUE ~ 2L) %>% as.integer())  # for geom_smooth to work
ds0 <-
filtered_data %>%
# integer indicator for the wave to ease some graphing
mutate(waveL = case_when(wave =="wave1"~1L,TRUE ~ 2L) %>% as.integer())  # for geom_smooth to work
# ---- inspect-data ------------------------------------------------------------
tibble(var_name = names(war_var_labels), var_value = war_var_labels)
ds_var <-
tibble(var_name = names(war_var_labels), var_value = war_var_labels)
# ---- inspect-data ------------------------------------------------------------
ds_var
filtered_data %>% tableone::CreateTableOne(data=.)
filtered_data %>% tableone::CreateTableOne(data=., strata = "wave")
filtered_data %>% explore::describe_all()
library(tidyverse)
ds0 <- readr::read_rds("../../data-public/raw/example-prosthetic-2.rds")
library(tidyverse)
ds0 <- readr::read_rds("../../data-public/raw/example-prosthetic-2.rds")
library(tidyverse)
ds0 <- readr::read_rds("../../data-public/raw/example-prosthetic-2.rds")
# ds0 %>% View() #
# ds0 %>% glimpse()
ds0 %>% explore::describe_all()
ds0 %>% nrow()
ds0 %>% summarize(row_count=n())
ds0 %>% summarize(
row_count = n()
,id_count = n_distinct(id)
) %>%
mutate(
id_is_the_grain = row_count == id_count
)
#| warning=F
library(tidyverse)
ds0 <- readr::read_rds("../../data-public/raw/example-prosthetic-2.rds")
ds0
# Chunk 1
#| code-summary: Reconciles working directory between execution modes
#| echo: false
#| results: hide
#| message: false
cat("Working directory: ", getwd())
library(knitr)
opts_knit$set(root.dir='../../') # keep this chunk isolated
# Chunk 2: set_options
#| label: set_options
#| code-summary: report-wide formatting options
#| echo: false
#| results: hide
#| message: false
cat("Working directory: ", getwd()) # turn on to test the location
report_render_start_time <- Sys.time()
# set options shared by all chunks
opts_chunk$set(
results      = 'show',
message      = FALSE,
warning      = FALSE,
comment      = NA,
tidy         = FALSE,
# dpi        = 400, # dots per inch,
# out.width  = "650px", # pixels, this affects only the markdown, not the underlying png file.  The height will be scaled appropriately.
fig.width    = 6, # inches
fig.height   = 4, # inches
fig.path     = 'figure-png-iso/' # where figures are stored
)
echo_chunks    <- FALSE #Toggle for debugging.
message_chunks <- FALSE #Toggle for debugging.
options(width=100) # number of characters to display in the output (dflt = 80)
ggplot2::theme_set(ggplot2::theme_bw()) # common theme for all graphs
# Chunk 3
#| warning=F
library(tidyverse)
ds0 <- readr::read_rds("./data-public/raw/example-prosthetic-2.rds")
#| warning=F
library(tidyverse)
ds0 <- readr::read_rds("./data-public/raw/example-prosthetic-2.rds")
rm(list = ls(all.names = TRUE)) # Clear the memory of variables from previous run. This is not called by knitr, because it's above the first chunk.
cat("\014") # Clear the console
# verify root location
cat("Working directory: ", getwd()) # Must be set to Project Directory
# Chunk 1
#| code-summary: Reconciles working directory between execution modes
#| echo: false
#| results: hide
#| message: false
cat("Working directory: ", getwd())
library(knitr)
opts_knit$set(root.dir='../../') # keep this chunk isolated
# Chunk 2: set_options
#| label: set_options
#| code-summary: report-wide formatting options
#| echo: false
#| results: hide
#| message: false
cat("Working directory: ", getwd()) # turn on to test the location
report_render_start_time <- Sys.time()
# set options shared by all chunks
opts_chunk$set(
results      = 'show',
message      = FALSE,
warning      = FALSE,
comment      = NA,
tidy         = FALSE,
# dpi        = 400, # dots per inch,
# out.width  = "650px", # pixels, this affects only the markdown, not the underlying png file.  The height will be scaled appropriately.
fig.width    = 6, # inches
fig.height   = 4, # inches
fig.path     = 'figure-png-iso/' # where figures are stored
)
echo_chunks    <- FALSE #Toggle for debugging.
message_chunks <- FALSE #Toggle for debugging.
options(width=100) # number of characters to display in the output (dflt = 80)
ggplot2::theme_set(ggplot2::theme_bw()) # common theme for all graphs
# Chunk 3: load-packages
#| label: load-packages
#| code-summary: Packages used in the current report
#| echo: true
#| results: hide
#| message: false
#| code-fold: true
# Chunk 4: load-sources
#| label: load-sources
#| code-summary: Collection of custom functions used in current repository
#| echo: true
#| results: hide
#| message: false
#| code-fold: true
# Chunk 5: declare-globals
#| label: declare-globals
#| code-summary: Values used throughout the report.
#| echo: true
#| results: hide
#| message: false
#| code-fold: true
# Chunk 6: declare-functions
#| label: declare-functions
#| code-summary: Custom functions defined for use in this report.
#| echo: true
#| results: hide
#| message: false
#| code-fold: true
# ds0 %>% View() #
# ds0 %>% glimpse()
ds0 %>% explore::describe_all()
library(magrittr)
# ds0 %>% View() #
# ds0 %>% glimpse()
ds0 %>% explore::describe_all()
#| warning=F
ds0 <- readr::read_rds("./data-public/raw/example-prosthetic-2.rds")
#| warning=F
ds0 <- readr::read_rds("./data-public/raw/example-prosthetic-2.rds")
ds0 %>% explore::describe_all()
# To rub this document, you need to connect your profile to Google account, first:
# Use this command to connect your profile to Google account:
library(googlesheets4)
gs4_auth()
# To rub this document, you need to connect your profile to Google account, first:
# Use this command to connect your profile to Google account:
library(googlesheets4)
gs4_auth()
# To rub this document, you need to connect your profile to Google account, first:
# Use this command to connect your profile to Google account:
library(googlesheets4)
gs4_auth()
# To rub this document, you need to connect your profile to Google account, first:
# Use this command to connect your profile to Google account:
library(googlesheets4)
gs4_auth()
# To rub this document, you need to connect your profile to Google account, first:
# Use this command to connect your profile to Google account:
library(googlesheets4)
gs4_auth()
